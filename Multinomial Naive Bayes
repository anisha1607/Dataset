#Author: Anisha Gupta
#Last Modified: 1st Dec 2021
#Topic: Email Spam Filteration(Modelling,Evaluation, and Visualization)
#Dataset: Emails collected from mailbox 
#Algorithm: Multinomial Naiye Bayes Classification
#Its used because it is useful for classification with discrete features
#Description: Data is extracted from the mailbox and saved into a csv file which is then labelled as spam or non spam.
#Dataset will have all necessary information like timestamp, sender, subject, body, class (Normal/Spam).
#Data is collected over a period of 14 days.
#This dataset is then used for Modelling using Multinomial Naiye Bayes Classification, Evaluation, and Visualization of the result.

library(base)
library(utils)
library(stats)
library(dplyr)
library(e1071)
library(ggplot2)
library(gmodels)

df <- read.csv("https://raw.githubusercontent.com/anthoniraj/dsr_datasets_final/main/19BDS0058.csv")

#head(df)

#Preprocessing
df$Message_body <- (gsub("[^0-9A-Za-z///' ]", "", as.matrix(df$Message_body))) 
df$Subject <- (gsub("[^0-9A-Za-z///' ]", "", as.matrix(df$Subject)))
df$Message_body <- (gsub("x000D", " ", as.matrix(df$Message_body))) 
df$Message_body <- (gsub("  ", " ", as.matrix(df$Message_body))) 

#This function preprocesses the rows which have day mentioned in front
processDate1 <- function(string){
  string1 <- substr(string, 6, 25)
  string1
}

#This function preprocesses the rows which do not have day mentioned in front
processDate2 <- function(string){
  string1 <- substr(string, 0, 20)
  string1
}

df$DateTime[nchar(df$DateTime) < 29] <- lapply(df$DateTime[nchar(df$DateTime) < 29], processDate2)
df$DateTime[nchar(df$DateTime) >= 29] <- lapply(df$DateTime[nchar(df$DateTime) >= 29], processDate1)

head(df)
View(df)

#Model

df <- select(df,MsgFrom,Subject,Message_body,Type)
#View(df)

df <-df[sample(1:nrow(df)),]

#dividing the dataset into training and testing
train_data <- df[2:180,]
test_data <- df[181:200,]

# #Creating the model
nb_model <- naiveBayes(Type ~ MsgFrom+Subject+Message_body, data= train_data)
# nb_model

pred <- predict(nb_model,newdata = test_data)
pred

#Actual result values of the test dataset
test_data$Type

#Inbuilt table to show the confusion matrix
CrossTable(pred, test_data$Type , prop.chisq= FALSE, prop.t=FALSE, dnn=c('Predicted','Actual'))

#Manual Confusion Matrix

fp <-0
fn <-0
tp <-0
tn <-0

for (i in 1:20) {
  x <- pred[i]
  y <- test_data$Type[i]
  if (x == y && x=="Spam") {
    tp= tp+1
  }else if(y=="Spam" && x=="Normal" ){
    fn= fn+1
  }else if(y=="Normal" && x=="Spam"){
    fp= fp+1
  }else{
    tn = tn+1
  }
}

print("True positive: ")
tp
print("True negative: ")
tn
print("False positive: ")
fp
print("False negative: ")
fn

#Measures

#Precision
p=tp/(tp+fp)

#Recall
r=tp/(tp+fn)

#F1 Score
f1=(2*p*r)/(p+r)

#Accuracy
a = (tp+tn)/(tp+fp+tn+fn)

print("Precision of model")
p
print("Recall of model")
r
print("F1 Score of model")
f1
print("Accuracy of model")
a

#Visualization

#Plotting bar graph for showing spam and normal data in train and test set

colors <- c('red','blue')
labels <- c('Spam','Normal')

#Counting spam and normal elements and storing them into a vector
train_count <- c(nrow(filter(train_data, Type=='Spam')), nrow(filter(train_data, Type=='Normal')))
test_count <- c(nrow(filter(test_data, Type=='Spam')), nrow(filter(test_data, Type=='Normal')))

#Plotting
train_data_viz <- data.frame(group=labels, value=train_count)
ggplot(train_data_viz, aes(x=labels, y=value, fill=group))+
        geom_bar(stat="identity",width=1)+
        ggtitle("Train Data Statistics")+
        theme(plot.title = element_text(hjust=0.5))+
        geom_label(aes(label=value), show.legend=FALSE)
        
test_data_viz <- data.frame(group=labels, value=test_count)
ggplot(test_data_viz, aes(x=labels, y=value, fill=group))+
        geom_bar(stat="identity",width=1)+
        ggtitle("Test Data Statistics")+
        theme(plot.title = element_text(hjust=0.5))+
        geom_label(aes(label=value), show.legend=FALSE)
        
#Heatmap
Actual <- factor(c("Spam","Normal","Spam","Normal"))
Predicted <- factor(c("Spam","Spam","Normal","Normal"))
Y <- c(tp,fp,fn,tn)
df1 <- data.frame(Actual,Predicted,Y)

ggplot(data = df1, mapping = aes(x = Actual, y = Predicted))+
    geom_tile(aes(fill=Y),colour = "white")+
    geom_text(aes(label=Y), vjust=1)+
    scale_fill_gradient(low="white",high="red")+
    ggtitle("Confusion Matrix")+
    theme_bw()+
    theme(plot.title = element_text(hjust=0.5))
